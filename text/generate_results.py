#!/usr/bin/env python

import os
import re
import sys

def findModel(*frags):
    rfrags = map(lambda x: re.compile(x), frags)
    res = []
    root = os.path.join(path, "ModelicaByExample")
    for ent in os.walk(root):
        for f in ent[2]:
            if f=="package.mo":
                continue
            match = True
            full = os.path.join(ent[0], f)
            rel = full[(len(root)+1):]
            modname = rel[:-3].replace("/",".")
            for rfrag in rfrags:
                if len(rfrag.findall(modname))==0:
                    match = False
            if match:
                res.append((full, rel, modname))
    if len(res)==1:
        return res[0]
    else:
        print "Unable to find a unique match for "+str(frags)+" matches include:"
        for r in res:
            print str(r)
        sys.exit(1)

def add_case(*frags, **kwargs):
    mod = findModel(*frags)
    data = kwargs.copy()
    data["name"] = mod[2]
    if not "short" in data:
        print "Error, not short hand name associated with pattern: "+str(frags)
        sys.exit(1)
    short = data["short"]
    if short in refs:
        print "Error, multiple cases using the same short hand name "+short
        sys.exit(1)
    refs[short] = data
    models.append(data)

class Var(object):
    def __init__(self, name, legend=None, style="-"):
        self.name = name
        self.style = style
        if legend==None:
            self.legend = name
        else:
            self.legend = legend
    def dict(self):
        return {"name": self.name, "legend": self.legend, "style": self.style}
    def __repr__(self):
        return repr(self.dict())

class SimplePlot(object):
    def __init__(self, short, model, vars, title=None, legloc="lower right"):
        self.short = short
        self.model = model
        self.vars = vars
        self.title = title
        self.legloc = legloc
    def script(self):
        simplePlot = """
# Autogenerated script to plot results for model
# %s
from xogeny.plot_utils import render_simple_plot
render_simple_plot("%s", %s, title=%s, legloc=%s)
""";
        dotname = self.model["name"]
        short = self.short
        dashname = dotname.replace(".", "_")
        vars = map(lambda x: x.dict(), self.vars)
        return simplePlot % (dotname, dashname, vars, repr(self.title), repr(self.legloc))

class ComparePlot(object):
    def __init__(self, short, model1, vars1, model2, vars2):
        self.short = short
        self.model1 = model1
        self.vars1 = vars1
        self.model2 = model2
        self.vars2 = vars2
    def script(self):
        compPlot = """
# Autogenerated script to plot results for model
# %s
from xogeny.plot_utils import render_comp_plot
render_comp_plot("%s", %s, "%s", %s)
""";
        short = self.short
        dotname1 = self.model1["name"]
        dashname1 = dotname1.replace(".", "_")
        dotname2 = self.model2["name"]
        dashname2 = dotname2.replace(".", "_")
        vars1 = map(lambda x: x.dict(), self.vars1)
        vars2 = map(lambda x: x.dict(), self.vars2)
        return compPlot % (dotname1, dashname1, vars1, dashname2, vars2)

def add_simple_plot(short, *vars, **kwargs):
    if short in refs:
        model = refs[short]
        if short in plots:
            print "Error, plot by the name of "+short+" already defined"
            sys.exit(1)
        plots[short] = SimplePlot(short, model, vars, **kwargs)
    else:
        print "Couldn't find model with shorthand name of "+short
        sys.exit(1)

def add_compare_plot(short1, v1, short2, v2):
    if not short1 in refs:
        print "Couldn't find model with shorthand name of "+short1
    if not short2 in refs:
        print "Couldn't find model with shorthand name of "+short2

    model1 = refs[short1]
    model2 = refs[short2]
    if short1 in plots:
        print "Error, plot by the name of "+short1+" already defined"
        sys.exit(1)
    plots[short1] = ComparePlot(short1, model1, v1, model2, v2)

models = []
plots = {}
refs = {}
path = os.path.abspath("..");
results = default=os.path.abspath("./results")

# This is the list of things I need to simulate

## Simple Examples
fovars = [Var("x")]
add_case("SimpleExample", "FirstOrder$", stopTime=10,
         short="FO", vars=["x"]);
add_simple_plot("FO", *fovars)

add_case("SimpleExample", "FirstOrderInitial", stopTime=10, short="FOI")
add_compare_plot("FOI", fovars, "FO", fovars)

add_case("SimpleExample", "FirstOrderSteady", stopTime=10, short="FOS")
add_simple_plot("FOS", *fovars)

## Cooling Example
add_case("NewtonCoolingWithDefaults", stopTime=1, short="NCWD")
add_simple_plot("NCWD", Var("T"))

## RLC
add_case("RLC1", stopTime=2, short="RLC1")
add_simple_plot("RLC1",
                Var("V", legend="Output Voltage", style="-"),
                Var("Vb", legend="Battery Voltage", style="-."),
                title="Circuit Response")

## RotationalSMD
sosvars = [Var("phi1", legend="Position of inertia 1"),
           Var("phi2", legend="Position of inertia 2"),
           Var("omega1", legend="Velocity of inertia 1"),
           Var("omega2", legend="Velocity of inertia 2")]
add_case("SecondOrderSystemInitParams", stopTime=1, short="SOSIP")
add_simple_plot("SOSIP", *sosvars)

add_case("SecondOrderSystemInitParams", stopTime=1, short="SOSIP1",
         modes={"phi1": 1.0})
add_simple_plot("SOSIP1", *sosvars)

## LotkaVolterra
lvvars = [Var("x", legend="Prey population"),
          Var("y", legend="Predator population")]

add_case("ClassicModel$", stopTime=1, short="LVCM")
add_simple_plot("LVCM", *lvvars)

add_case("QuiescientModel$", stopTime=1, short="LVQM")
add_simple_plot("LVQM", *lvvars)

add_case("QuiescientModelUsingStart", stopTime=1, short="LVQMUS")
add_simple_plot("LVQMUS", *lvvars)

def genPlotScripts():
    for model in models:
        short = model["short"]
        plot = plots[short]
        with open(os.path.join("plots", short+".py"), "w+") as fp:
            fp.write(plot.script())
            fp.close()

def genSimScript():
    preamble = """
    loadModel(ModelicaServices);
    loadModel(Modelica);
    setModelicaPath(getModelicaPath()+":"+"%s");
    loadModel(ModelicaByExample);
    """ % (path,)

    cmd = preamble

    for model in models:
        dotname = model["name"]
        stop_time = model["stopTime"]
        dashname = dotname.replace(".", "_")
        mods = model.get("mods", {})
        modstr = ",".join(map(lambda x: x+"="+str(mods[x]), mods))

        if stop_time==None:
            cmd = cmd+"""
    simulate(ModelicaByExample.%s, tolerance=1e-3, numberOfIntervals=500, fileNamePrefix="%s");
    """ % (dotname, dashname)
        else:
            cmd = cmd+"""
    simulate(ModelicaByExample.%s, stopTime=%s, tolerance=1e-3, numberOfIntervals=500, fileNamePrefix="%s");
    """ % (dotname, stop_time, dashname)

    with open("simulateAll.mos", "w+") as fp:
        fp.write(cmd)

genSimScript()
genPlotScripts()
