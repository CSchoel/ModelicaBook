import re
import os
import sys

path = os.path.abspath(os.path.join(__file__,"..","..","..","..",".."));

results = {}
plots = {}

def findModel(*frags):
    rfrags = map(lambda x: re.compile(x), frags)
    res = []
    root = os.path.join(path, "ModelicaByExample")
    for ent in os.walk(root):
        for f in ent[2]:
            if f=="package.mo":
                continue
            match = True
            full = os.path.join(ent[0], f)
            rel = full[(len(root)+1):]
            modname = rel[:-3].replace("/",".")
            for rfrag in rfrags:
                if len(rfrag.findall(modname))==0:
                    match = False
            if match:
                res.append((full, rel, modname))
    if len(res)==1:
        return res[0]
    else:
        print "Path: "+path
        print "Unable to find a unique match for "+str(frags)+" matches include:"
        for r in res:
            print str(r)
        sys.exit(1)

def add_case(frags, res, stopTime=1.0, mods=None):
    mod = findModel(*frags)
    if res in results:
        raise NameError("Result %s already exists!" % (res,))
    data = {
        "name": mod[2],
        "stopTime": stopTime,
        "mods": mods
    };
    results[res] = data

class Var(object):
    def __init__(self, name, legend=None, style="-"):
        self.name = name
        self.style = style
        if legend==None:
            self.legend = name
        else:
            self.legend = legend
    def dict(self):
        return {"name": self.name, "legend": self.legend, "style": self.style}
    def __repr__(self):
        return repr(self.dict())

simpleplot = """
# Autogenerated script to plot named %s using results: %s
from xogeny.plot_utils import render_simple_plot
render_simple_plot(name=%s, vars=%s, title=%s, legloc=%s, ylabel=%s)
""";

class SimplePlot(object):
    def __init__(self, short, model, vars, title=None, legloc="lower right", ylabel=""):
        self.short = short
        self.model = model
        self.vars = vars
        self.title = title
        self.legloc = legloc
        self.ylabel = ylabel
    def script(self):
        simplePlot = """
# Autogenerated script to plot results for model
# %s
from xogeny.plot_utils import render_simple_plot
render_simple_plot("%s", %s, title=%s, legloc=%s, ylabel=%s)
""";
        dotname = self.model["name"]
        short = self.short
        dashname = dotname.replace(".", "_")
        vars = map(lambda x: x.dict(), self.vars)
        return simplePlot % (dotname, short, vars,
                             repr(self.title), repr(self.legloc), repr(self.ylabel))

class ComparePlot(object):
    def __init__(self, short, model1, vars1, model2, vars2,
                 title=None, legloc="lower right", ylabel=""):
        self.short = short
        self.model1 = model1
        self.vars1 = vars1
        self.model2 = model2
        self.vars2 = vars2
        self.title = title
        self.legloc = legloc
        self.ylabel = ylabel
    def script(self):
        compPlot = """
# Autogenerated script to plot results for model
# %s
from xogeny.plot_utils import render_comp_plot
render_comp_plot("%s", %s, "%s", %s, title=%s, legloc=%s, ylabel=%s)
""";
        short = self.short
        dotname1 = self.model1["name"]
        dashname1 = dotname1.replace(".", "_")
        shortname1 = self.model1["short"]
        dotname2 = self.model2["name"]
        dashname2 = dotname2.replace(".", "_")
        shortname2 = self.model2["short"]
        vars1 = map(lambda x: x.dict(), self.vars1)
        vars2 = map(lambda x: x.dict(), self.vars2)
        return compPlot % (dotname1, shortname1, vars1, shortname2, vars2,
                           repr(self.title), repr(self.legloc), repr(self.ylabel))

def add_simple_plot(plot, vars, title, legloc="upper right", ylabel="", res=None):
    if plot in plots:
        raise NameError("Plot named "+plot+" already exists");
    if res==None:
        res = plot
    if not res in results:
        raise NameError("Unable to find result "+res+" for plot "+plot)
    r = results[res]

    plots[plot] = {
        "type": "simple",
        "vars": vars,
        "title": title,
        "legloc": legloc,
        "ylabel": ylabel,
        "res": res
    };

def add_compare_plot(plot, res1, v1, res2, v2, title):
    if plot in plots:
        raise NameError("Plot "+plot+" already exists")
    if not res1 in results:
        raise NameError("Unable to find result "+res1+" in plot "+plot)
    if not res2 in results:
        raise NameError("Unable to find result "+res2+" in plot "+plot)

    plots[plot] = {
        "type": "compare",
        "res1": res1,
        "v1": v1,
        "res2": res2,
        "v2": v2,
        "title": title
    };

def generate():
    for plot in plots:
        pdata = plots[plot]
        with open(os.path.join(path, "text", "plots", "_tmp_"+plot+".py"), "w+") as ofp:
            if pdata["type"]=="simple":
                ofp.write(simpleplot % (repr(plot), repr(pdata["res"]), repr(plot),
                                        repr(pdata["vars"]), repr(pdata["title"]),
                                        repr(pdata["legloc"]), repr(pdata["ylabel"])))
